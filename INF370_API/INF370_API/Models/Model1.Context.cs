//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace INF370_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Web;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Runtime.Serialization;
    using System.IO;
    using System.Data.Entity.Core.Objects;
    using System.Reflection;
    using System.Xml.Serialization;
    using System.Xml.Linq;
    using System.Xml;
    using System.Dynamic;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.EntityFrameworkCore.ChangeTracking;

    public partial class INF370Entities : System.Data.Entity.DbContext
    {
        public INF370Entities()
            : base("name=INF370Entities")
        {
        }
        SqlConnection myConnect = new SqlConnection("Data Source = INF370.database.windows.net; Initial Catalog = INF370; Persist Security Info=True;User ID = AccessDb370; Password=IQsolutions3;MultipleActiveResultSets=True;Application Name = EntityFramework");

        public new EntityEntry Entry { get; }
        public AuditType AuditType { get; set; }
        public string AuditUser { get; set; }
        public string TableName { get; set; }
        public Dictionary<string, object>
               KeyValues
        { get; } = new Dictionary<string, object>();
        public Dictionary<string, object>
               OldValues
        { get; } = new Dictionary<string, object>();
        public Dictionary<string, object>
               NewValues
        { get; } = new Dictionary<string, object>();
        public List<string> ChangedColumns { get; } = new List<string>();

        tbl_test_audit_trail audit = new tbl_test_audit_trail();
        public override int SaveChanges()
        {
            tbl_test_audit_trail audit = new tbl_test_audit_trail();

            var httpRequest = HttpContext.Current.Request;
            var postedFile1 = httpRequest.Headers["userId"];




            var auditable = ChangeTracker.Entries();
            if (!auditable.Any() || postedFile1 == null) return base.SaveChanges();

            foreach (var dbEntry in auditable)
            {
                var myTable = "";
                //input.Remove(input.IndexOf("/") + 1);
                TableName = dbEntry.Entity.GetType().Name;

                var tab = TableName.Remove(TableName.IndexOf("_"));

                if (tab != null)
                {

                    myTable = tab;

                }

                else
                {
                    myTable = TableName;

                }

                if (dbEntry.Entity.GetType().Name == "tbl_test_audit_trail" || dbEntry.State == System.Data.Entity.EntityState.Detached ||
                   dbEntry.State == System.Data.Entity.EntityState.Unchanged)
                {
                    continue;
                }

                var objectStateEntry = ((IObjectContextAdapter)this).ObjectContext.ObjectStateManager.GetObjectStateEntry(dbEntry.Entity);


                var hh = objectStateEntry.GetModifiedProperties();
                var table = objectStateEntry.Entity.GetType().Name;

                var modifiedEntries = ChangeTracker.Entries().Where(e => e.State == System.Data.Entity.EntityState.Modified);

                switch (dbEntry.State)
                {
                    case System.Data.Entity.EntityState.Added:
                        var ooldValues = OldValues;
                        var nnewValues = dbEntry.CurrentValues.ToObject();


                        string dbColumnName = dbEntry.Entity.GetType().GUID.ToString();

                        audit.audit_datetime_utc = DateTime.Now;
                        audit.audit_type = AuditType.Create.ToString();
                        audit.audit_user = postedFile1;
                        audit.table_name = myTable;
                        audit.key_values = JsonConvert.SerializeObject(KeyValues);
                        audit.old_values = ooldValues == null ?
                                          null : JsonConvert.SerializeObject(ooldValues);
                        audit.new_values = nnewValues == null ?
                                          null : JsonConvert.SerializeObject(nnewValues);
                        audit.changed_columns = ChangedColumns == null ?
                                               null : JsonConvert.SerializeObject(hh);



                        try
                        {
                            SqlCommand myComm = new SqlCommand("INSERT INTO tbl_test_audit_trail(audit_datetime_utc, audit_type, audit_user, table_name, key_values,old_values,new_values,changed_columns)Values( '" + audit.audit_datetime_utc + "', '" + audit.audit_type + "' , '" + audit.audit_user + "', '" + audit.table_name + "', '" + audit.key_values + "', '" + audit.old_values + "', '" + audit.new_values + "', '" + audit.changed_columns + "')", myConnect);
                            myConnect.Open();
                            myComm.ExecuteNonQuery();
                        }
                        catch (Exception)
                        {

                            return -1;
                        }
                        finally { myConnect.Close(); }


                        break;
                    case System.Data.Entity.EntityState.Modified:
                        var ooldValues1 = dbEntry.OriginalValues.ToObject();
                        dynamic o = new ExpandoObject();
                        o.data = dbEntry.OriginalValues.ToObject();
                        var n = Newtonsoft.Json.JsonConvert.SerializeObject(o);
                        var nnewValues1 = dbEntry.CurrentValues.ToObject();
                        int primaryKeyOfEntity = (int)objectStateEntry.EntityKey.EntityKeyValues[0].Value;

                        var nnewValu = dbEntry.CurrentValues.PropertyNames.ToList();

                        string dbColumnName1 = dbEntry.Entity.GetType().GUID.ToString();

                        audit.audit_datetime_utc = DateTime.Now;
                        audit.audit_type = AuditType.Update.ToString();
                        audit.audit_user = postedFile1;
                        audit.table_name = myTable;
                        audit.key_values = JsonConvert.SerializeObject(primaryKeyOfEntity);
                        audit.old_values = ooldValues1 == null ?
                                          null : JsonConvert.SerializeObject(ooldValues1);
                        audit.new_values = nnewValues1 == null ?
                                          null : JsonConvert.SerializeObject(nnewValues1);
                        audit.changed_columns = ChangedColumns == null ?
                                               null : JsonConvert.SerializeObject(hh);


                        try
                        {
                            SqlCommand myComm = new SqlCommand("INSERT INTO tbl_test_audit_trail(audit_datetime_utc, audit_type, audit_user, table_name, key_values,old_values,new_values,changed_columns)Values( '" + audit.audit_datetime_utc + "', '" + audit.audit_type + "' , '" + audit.audit_user + "', '" + audit.table_name + "', '" + audit.key_values + "', '" + audit.old_values + "', '" + audit.new_values + "', '" + audit.changed_columns + "')", myConnect);
                            myConnect.Open();
                            myComm.ExecuteNonQuery();
                        }
                        catch (Exception)
                        {

                            return -1;
                        }
                        finally { myConnect.Close(); }

                        break;

                    case System.Data.Entity.EntityState.Deleted:
                        var ooldValues2 = dbEntry.OriginalValues.ToObject();
                        //  var nnewValues2 = dbEntry.CurrentValues.ToObject();
                        int primaryKeyOfEntity1 = (int)objectStateEntry.EntityKey.EntityKeyValues[0].Value;


                        string dbColumnName2 = dbEntry.Entity.GetType().GUID.ToString();

                        audit.audit_datetime_utc = DateTime.Now;
                        audit.audit_type = AuditType.Delete.ToString();
                        audit.audit_user = postedFile1;
                        audit.table_name = myTable;
                        audit.key_values = JsonConvert.SerializeObject(primaryKeyOfEntity1);
                        audit.old_values = ooldValues2 == null ?
                                          null : JsonConvert.SerializeObject(ooldValues2);
                        audit.new_values = NewValues == null ?
                                          null : JsonConvert.SerializeObject(NewValues);
                        audit.changed_columns = ChangedColumns == null ?
                                               null : JsonConvert.SerializeObject(hh);


                        try
                        {
                            SqlCommand myComm = new SqlCommand("INSERT INTO tbl_test_audit_trail(audit_datetime_utc, audit_type, audit_user, table_name, key_values,old_values,new_values,changed_columns)Values( '" + audit.audit_datetime_utc + "', '" + audit.audit_type + "' , '" + audit.audit_user + "', '" + audit.table_name + "', '" + audit.key_values + "', '" + audit.old_values + "', '" + audit.new_values + "', '" + audit.changed_columns + "')", myConnect);
                            myConnect.Open();
                            myComm.ExecuteNonQuery();
                        }
                        catch (Exception)
                        {

                            return -1;
                        }
                        finally { myConnect.Close(); }

                        break;

                }

            }

            return base.SaveChanges();

        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<AGENT> AGENTs { get; set; }
        public virtual DbSet<AREA> AREAs { get; set; }
        public virtual DbSet<BOOKING> BOOKINGs { get; set; }
        public virtual DbSet<CITY> CITies { get; set; }
        public virtual DbSet<CLIENT> CLIENTs { get; set; }
        public virtual DbSet<COMPLAINT> COMPLAINTs { get; set; }
        public virtual DbSet<COMPLAINTSTATU> COMPLAINTSTATUS { get; set; }
        public virtual DbSet<DATE> DATEs { get; set; }
        public virtual DbSet<DATETIMESLOT> DATETIMESLOTs { get; set; }
        public virtual DbSet<DEACTIVATEDUSER> DEACTIVATEDUSERs { get; set; }
        public virtual DbSet<DOCUMENT> DOCUMENTs { get; set; }
        public virtual DbSet<EMPLOYEE> EMPLOYEEs { get; set; }
        public virtual DbSet<EMPLOYEEDATETIMESLOT> EMPLOYEEDATETIMESLOTs { get; set; }
        public virtual DbSet<EMPLOYEESLOTSTATU> EMPLOYEESLOTSTATUS { get; set; }
        public virtual DbSet<EMPLOYEETYPE> EMPLOYEETYPEs { get; set; }
        public virtual DbSet<FEEDBACK> FEEDBACKs { get; set; }
        public virtual DbSet<INSPECTION> INSPECTIONs { get; set; }
        public virtual DbSet<INSPECTIONSTATU> INSPECTIONSTATUS { get; set; }
        public virtual DbSet<INSPECTIONTYPE> INSPECTIONTYPEs { get; set; }
        public virtual DbSet<ITEM> ITEMs { get; set; }
        public virtual DbSet<JOB> JOBs { get; set; }
        public virtual DbSet<JOBSTATU> JOBSTATUS { get; set; }
        public virtual DbSet<JOBTASK> JOBTASKs { get; set; }
        public virtual DbSet<JOBTYPE> JOBTYPEs { get; set; }
        public virtual DbSet<PAYMENT> PAYMENTs { get; set; }
        public virtual DbSet<PAYMENTTYPE> PAYMENTTYPEs { get; set; }
        public virtual DbSet<PROPERTY> PROPERTies { get; set; }
        public virtual DbSet<PROPERTYPHOTO> PROPERTYPHOTOes { get; set; }
        public virtual DbSet<PROPERTYSTATU> PROPERTYSTATUS { get; set; }
        public virtual DbSet<PROPERTYTYPE> PROPERTYTYPEs { get; set; }
        public virtual DbSet<PROVINCE> PROVINCEs { get; set; }
        public virtual DbSet<PURCHASE> PURCHASEs { get; set; }
        public virtual DbSet<PURCHASELINE> PURCHASELINEs { get; set; }
        public virtual DbSet<RENTAL_AGREEMENT> RENTAL_AGREEMENT { get; set; }
        public virtual DbSet<RENTAL_STATUS> RENTAL_STATUS { get; set; }
        public virtual DbSet<RENTALAMOUNT> RENTALAMOUNTs { get; set; }
        public virtual DbSet<RENTALAPPLICATION> RENTALAPPLICATIONs { get; set; }
        public virtual DbSet<RENTALAPPLICATIONSTATU> RENTALAPPLICATIONSTATUS { get; set; }
        public virtual DbSet<RENTALPERIOD> RENTALPERIODs { get; set; }
        public virtual DbSet<SLOT> SLOTs { get; set; }
        public virtual DbSet<SUPPLIER> SUPPLIERs { get; set; }
        public virtual DbSet<tbl_test_audit_trail> tbl_test_audit_trail { get; set; }
        public virtual DbSet<TERMINATEDAGREEMENT> TERMINATEDAGREEMENTs { get; set; }
        public virtual DbSet<Time> Times { get; set; }
        public virtual DbSet<USER> USERs { get; set; }
        public virtual DbSet<USERTYPE> USERTYPEs { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Job1> Job1 { get; set; }
        public virtual DbSet<JobParameter> JobParameters { get; set; }
        public virtual DbSet<JobQueue> JobQueues { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<Schema> Schemata { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Set> Sets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
    }
}
